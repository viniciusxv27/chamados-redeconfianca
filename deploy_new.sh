#!/bin/bash
set -e  # Exit on any error

# Script de deploy para Docker/EasyPanel
echo "üöÄ Iniciando deploy do Rede Confian√ßa..."

# Verificar se as vari√°veis essenciais est√£o definidas
if [ -z "$DATABASE_URL" ]; then
    echo "‚ö†Ô∏è DATABASE_URL n√£o definida, usando SQLite como fallback"
    export DATABASE_URL="sqlite:///db.sqlite3"
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p staticfiles media logs
touch staticfiles/.keep

# Verificar conectividade com PostgreSQL (se aplic√°vel)
if [[ $DATABASE_URL == postgresql* ]]; then
    echo "üîç Verificando conectividade PostgreSQL..."
    for i in {1..30}; do
        if python -c "
import os
import psycopg2
from urllib.parse import urlparse
url = urlparse(os.environ['DATABASE_URL'])
try:
    conn = psycopg2.connect(
        host=url.hostname,
        port=url.port or 5432,
        user=url.username,
        password=url.password,
        database=url.path[1:] if url.path else '',
        connect_timeout=5
    )
    conn.close()
    print('‚úÖ PostgreSQL conectado com sucesso!')
    exit(0)
except Exception as e:
    print(f'Tentativa {i}/30 - Erro: {str(e)}')
    exit(1)
" 2>/dev/null; then
            break
        fi
        echo "‚è≥ Aguardando PostgreSQL... ($i/30)"
        sleep 2
    done
fi

# Aplicar migra√ß√µes
echo "üóÑÔ∏è Aplicando migra√ß√µes do banco de dados..."
python manage.py migrate --noinput || {
    echo "‚ùå Erro ao aplicar migra√ß√µes!"
    echo "Detalhes do erro:"
    python manage.py migrate --verbosity=2 --noinput || true
    exit 1
}

# Coletar arquivos est√°ticos
echo "üìÅ Coletando arquivos est√°ticos..."
python manage.py collectstatic --noinput --clear || {
    echo "‚ùå Erro ao coletar arquivos est√°ticos!"
    echo "Verificando diret√≥rios..."
    ls -la staticfiles/ || true
    exit 1
}

# Verificar configura√ß√£o inicial
echo "üîç Verificando configura√ß√£o inicial..."
python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
count = User.objects.filter(is_superuser=True).count()
total_users = User.objects.count()
print(f'üë• Total de usu√°rios: {total_users}')
print(f'üëë Superusu√°rios: {count}')
if count == 0:
    print('‚ö†Ô∏è ATEN√á√ÉO: Nenhum superusu√°rio encontrado!')
    print('üí° Execute: python manage.py createsuperuser')
" 2>/dev/null || echo "‚ö†Ô∏è N√£o foi poss√≠vel verificar usu√°rios"

# Verificar se staticfiles foi criado corretamente
if [ ! -d "staticfiles" ] || [ -z "$(ls -A staticfiles)" ]; then
    echo "‚ùå Erro: Diret√≥rio staticfiles vazio ou inexistente!"
    echo "Criando estrutura m√≠nima..."
    mkdir -p staticfiles
    touch staticfiles/.keep
fi

echo "‚úÖ Deploy configurado com sucesso!"
echo "üåê Iniciando servidor Gunicorn..."
echo "üìä Configura√ß√µes:"
echo "   - Porta: ${PORT:-8000}"
echo "   - Workers: ${WEB_CONCURRENCY:-3}"
echo "   - Timeout: 120s"
echo "   - Database: ${DATABASE_URL:0:20}..."

# Iniciar servidor com logs detalhados
exec gunicorn redeconfianca.wsgi:application \
    --bind 0.0.0.0:${PORT:-8000} \
    --workers ${WEB_CONCURRENCY:-3} \
    --worker-class sync \
    --timeout 120 \
    --keep-alive 2 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    --capture-output
